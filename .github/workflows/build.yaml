name: build
on:
  push:
    branches: 
      - "**"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest

    steps:
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.8
        cache: false

    - name: Setup Just
      uses: extractions/setup-just@v3
      with:
        just-version: '1.40.0'

    - name: Install libpcap-dev (Linux)
      if: "matrix.os == 'ubuntu-latest'"
      run: sudo apt-get update && sudo apt-get install -y libpcap-dev

    - name: Install Npcap and SDK (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $npcapZipUrl = "https://npcap.com/dist/npcap-1.75.exe.zip"
        $npcapZipPath = "$env:TEMP\npcap-1.75.zip"
        $npcapExtractDir = "$env:TEMP\npcap"

        Invoke-WebRequest -Uri $npcapZipUrl -OutFile $npcapZipPath
        Expand-Archive -Path $npcapZipPath -DestinationPath $npcapExtractDir -Force

        $installerPath = Join-Path $npcapExtractDir "npcap-1.75.exe"
        Start-Process $installerPath -ArgumentList "/S", "/winpcap_mode=yes" -Wait

        $sdkUrl = "https://npcap.com/dist/npcap-sdk-1.15.zip"
        $sdkZip = "$env:USERPROFILE\npcap-sdk.zip"
        $destDir = "$env:USERPROFILE\npcap-sdk"
        $wpdpackDir = "C:\wpdpack"

        Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkZip
        Expand-Archive -Path $sdkZip -DestinationPath $destDir -Force

        Write-Host "Npcap SDK extracted to: $destDir"
        Get-ChildItem -Path $destDir

        if (Test-Path $wpdpackDir) {
          Remove-Item -Path $wpdpackDir -Recurse -Force
        }
        Copy-Item -Path $destDir -Destination $wpdpackDir -Recurse
        Write-Host "Npcap SDK copied to: $wpdpackDir"

    - name: Set CGO flags for Npcap (Windows)
      if: "matrix.os == 'windows-latest'"
      run: |
        echo "CGO_CFLAGS=-IC:\wpdpack\Include" >> $env:GITHUB_ENV
        echo "CGO_LDFLAGS=-LC:\wpdpack\Lib" >> $env:GITHUB_ENV
      shell: powershell

    - name: Checkout
      uses: actions/checkout@v4

    - name: Build
      run: |
        go mod tidy
        just build test

    - name: Coveralls
      if: "matrix.os == 'ubuntu-latest'"
      uses: coverallsapp/github-action@v2.3.0
      with:
        github-token: ${{ secrets.github_token }}
        file: coverage.out
        format: golang