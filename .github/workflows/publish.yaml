name: publish
on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  setup:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'releases/v') && github.event.pull_request.merged == true
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Git Tag name
        id: vars
        run: |
          echo "tag=${GITHUB_HEAD_REF##*/v}" >> $GITHUB_OUTPUT
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.vars.outputs.tag }}
          release_name: Release v${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false

  publish:
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    outputs:
      tag: ${{ needs.setup.outputs.tag }}
      upload_url: ${{ needs.setup.outputs.upload_url }}
    steps:
      - uses: extractions/setup-just@v3
        with:
          just-version: '1.40.0'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Initialize Git
        shell: bash
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "action@github.com"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Install libpcap-dev (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      - name: Install Npcap and SDK (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $npcapExeUrl = "https://npcap.com/dist/npcap-1.82.exe"
          $npcapExePath = "$env:TEMP\npcap-installer.exe"
          Invoke-WebRequest -Uri $npcapExeUrl -OutFile $npcapExePath
          Start-Process -Wait -FilePath $npcapExePath -ArgumentList "/S"
          $sdkUrl = "https://npcap.com/dist/npcap-sdk-1.15.zip"
          $sdkZip = "$env:USERPROFILE\npcap-sdk.zip"
          $destDir = "$env:USERPROFILE\npcap-sdk"
          $wpdpackDir = "C:\wpdpack"
          Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkZip
          Expand-Archive -Path $sdkZip -DestinationPath $destDir -Force
          if (Test-Path $wpdpackDir) { Remove-Item -Path $wpdpackDir -Recurse -Force }
          Copy-Item -Path $destDir -Destination $wpdpackDir -Recurse

      - name: Set CGO flags for Npcap (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "CGO_CFLAGS=-IC:\wpdpack\Include" >> $env:GITHUB_ENV
          echo "CGO_LDFLAGS=-LC:\wpdpack\Lib" >> $env:GITHUB_ENV
        shell: powershell

      - name: Create distribution files.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          just build_release_binaries
          just upload_assets v${{ needs.setup.outputs.tag }}

  docker:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Normalize repository name to lowercase
        id: repo
        run: |
          echo "repository=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.repository }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=,suffix=,format=short
            type=raw,value=v${{ needs.publish.outputs.tag }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout the project
        uses: actions/checkout@v4

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo.outputs.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo.outputs.repository }}:buildcache,mode=max